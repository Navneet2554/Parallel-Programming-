{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Quicksort\
#include <stdio.h>\
#include <omp.h>\
\
int partition(int arr[], int low, int high) \{\
  int pivot = arr[high];\
  int i = (low - 1);\
\
  for (int j = low; j < high; j++) \{\
    if (arr[j] <= pivot) \{\
      i++;\
      int temp = arr[i];\
      arr[i] = arr[j];\
      arr[j] = temp;\
    \}\
  \}\
\
  int temp = arr[i + 1];\
  arr[i + 1] = arr[high];\
  arr[high] = temp;\
\
  return (i + 1);\
\}\
\
void quicksort(int arr[], int low, int high) \{\
  if (low < high) \{\
    int pi = partition(arr, low, high);\
\
    #pragma omp parallel sections num_threads(2)\
    \{\
      #pragma omp section\
      \{\
        quicksort(arr, low, pi - 1);\
      \}\
      #pragma omp section\
      \{\
        quicksort(arr, pi + 1, high);\
      \}\
    \}\
  \}\
\}\
\
int main() \{\
  int arr[] = \{6, 5, 3, 1, 8, 7, 2, 4\};\
  int n = sizeof(arr) / sizeof(arr[0]);\
\
  printf("Unsorted array: \\n");\
  for (int i = 0; i < n; ++i)\
    printf("%d ", arr[i]);\
\
  #pragma omp parallel\
  \{\
    #pragma omp single\
    \{\
      quicksort(arr, 0, n - 1);\
    \}\
  \}\
\
  printf("\\nSorted array: \\n");\
  for (int i = 0; i < n; ++i)\
    printf("%d ", arr[i]);\
\
  return 0;\
\}}