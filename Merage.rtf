{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Merge sort parallel\
#include <stdio.h>\
#include <omp.h>\
\
void merge(int arr[], int low, int mid, int high) \{\
  int n1 = mid - low + 1;\
  int n2 = high - mid;\
  int left[n1], right[n2];\
\
  for (int i = 0; i < n1; i++)\
    left[i] = arr[low + i];\
  for (int j = 0; j < n2; j++)\
    right[j] = arr[mid + 1 + j];\
\
  int i = 0, j = 0, k = low;\
  while (i < n1 && j < n2) \{\
    if (left[i] <= right[j])\
      arr[k++] = left[i++];\
    else\
      arr[k++] = right[j++];\
  \}\
\
  while (i < n1)\
    arr[k++] = left[i++];\
  while (j < n2)\
    arr[k++] = right[j++];\
\}\
\
void mergesort(int arr[], int low, int high) \{\
  if (low < high) \{\
    int mid = low + (high - low) / 2;\
    #pragma omp parallel sections num_threads(2)\
    \{\
      #pragma omp section\
      \{\
        mergesort(arr, low, mid);\
      \}\
      #pragma omp section\
      \{\
        mergesort(arr, mid + 1, high);\
      \}\
    \}\
    merge(arr, low, mid, high);\
  \}\
\}\
\
int main() \{\
  int arr[] = \{6, 5, 3, 1, 8, 7, 2, 4\};\
  int n = sizeof(arr) / sizeof(arr[0]);\
\
  printf("Unsorted array: \\n");\
  for (int i = 0; i < n; ++i)\
    printf("%d ", arr[i]);\
\
  #pragma omp parallel\
  \{\
    #pragma omp single\
    \{\
      mergesort(arr, 0, n - 1);\
    \}\
  \}\
\
  printf("\\nSorted array: \\n");\
  for (int i = 0; i < n; ++i)\
    printf("%d ", arr[i]);\
\
  return 0;\
\}}